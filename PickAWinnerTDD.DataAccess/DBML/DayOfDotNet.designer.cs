#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PickAWinnerTDD.DataAccess.DBML
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="DayOfDotNetTDD")]
	public partial class DayOfDotNetDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAttendee(Attendee instance);
    partial void UpdateAttendee(Attendee instance);
    partial void DeleteAttendee(Attendee instance);
    partial void InsertWinner(Winner instance);
    partial void UpdateWinner(Winner instance);
    partial void DeleteWinner(Winner instance);
    partial void InsertSwag(Swag instance);
    partial void UpdateSwag(Swag instance);
    partial void DeleteSwag(Swag instance);
    partial void InsertSponsor(Sponsor instance);
    partial void UpdateSponsor(Sponsor instance);
    partial void DeleteSponsor(Sponsor instance);
    #endregion
		
		public DayOfDotNetDataContext() : 
				base(global::PickAWinnerTDD.DataAccess.Properties.Settings.Default.DayOfDotNetTDDConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DayOfDotNetDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DayOfDotNetDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DayOfDotNetDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DayOfDotNetDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Attendee> Attendees
		{
			get
			{
				return this.GetTable<Attendee>();
			}
		}
		
		public System.Data.Linq.Table<Winner> Winners
		{
			get
			{
				return this.GetTable<Winner>();
			}
		}
		
		public System.Data.Linq.Table<Swag> Swags
		{
			get
			{
				return this.GetTable<Swag>();
			}
		}
		
		public System.Data.Linq.Table<Sponsor> Sponsors
		{
			get
			{
				return this.GetTable<Sponsor>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Attendee")]
	public partial class Attendee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _AttendeeID;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _Email;
		
		private string _Company;
		
		private bool _HasWon;
		
		private bool _IsEligible;
		
		private EntitySet<Winner> _Winners;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAttendeeIDChanging(long value);
    partial void OnAttendeeIDChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnCompanyChanging(string value);
    partial void OnCompanyChanged();
    partial void OnHasWonChanging(bool value);
    partial void OnHasWonChanged();
    partial void OnIsEligibleChanging(bool value);
    partial void OnIsEligibleChanged();
    #endregion
		
		public Attendee()
		{
			this._Winners = new EntitySet<Winner>(new Action<Winner>(this.attach_Winners), new Action<Winner>(this.detach_Winners));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AttendeeID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long AttendeeID
		{
			get
			{
				return this._AttendeeID;
			}
			set
			{
				if ((this._AttendeeID != value))
				{
					this.OnAttendeeIDChanging(value);
					this.SendPropertyChanging();
					this._AttendeeID = value;
					this.SendPropertyChanged("AttendeeID");
					this.OnAttendeeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(100)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Company", DbType="VarChar(100)")]
		public string Company
		{
			get
			{
				return this._Company;
			}
			set
			{
				if ((this._Company != value))
				{
					this.OnCompanyChanging(value);
					this.SendPropertyChanging();
					this._Company = value;
					this.SendPropertyChanged("Company");
					this.OnCompanyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HasWon", DbType="Bit NOT NULL")]
		public bool HasWon
		{
			get
			{
				return this._HasWon;
			}
			set
			{
				if ((this._HasWon != value))
				{
					this.OnHasWonChanging(value);
					this.SendPropertyChanging();
					this._HasWon = value;
					this.SendPropertyChanged("HasWon");
					this.OnHasWonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsEligible", DbType="Bit NOT NULL")]
		public bool IsEligible
		{
			get
			{
				return this._IsEligible;
			}
			set
			{
				if ((this._IsEligible != value))
				{
					this.OnIsEligibleChanging(value);
					this.SendPropertyChanging();
					this._IsEligible = value;
					this.SendPropertyChanged("IsEligible");
					this.OnIsEligibleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Attendee_Winner", Storage="_Winners", ThisKey="AttendeeID", OtherKey="AttendeeID")]
		public EntitySet<Winner> Winners
		{
			get
			{
				return this._Winners;
			}
			set
			{
				this._Winners.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Winners(Winner entity)
		{
			this.SendPropertyChanging();
			entity.Attendee = this;
		}
		
		private void detach_Winners(Winner entity)
		{
			this.SendPropertyChanging();
			entity.Attendee = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Winner")]
	public partial class Winner : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _WinnerID;
		
		private long _AttendeeID;
		
		private long _SponsorID;
		
		private long _SwagID;
		
		private string _Name;
		
		private EntityRef<Attendee> _Attendee;
		
		private EntityRef<Swag> _Swag;
		
		private EntityRef<Sponsor> _Sponsor;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnWinnerIDChanging(long value);
    partial void OnWinnerIDChanged();
    partial void OnAttendeeIDChanging(long value);
    partial void OnAttendeeIDChanged();
    partial void OnSponsorIDChanging(long value);
    partial void OnSponsorIDChanged();
    partial void OnSwagIDChanging(long value);
    partial void OnSwagIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Winner()
		{
			this._Attendee = default(EntityRef<Attendee>);
			this._Swag = default(EntityRef<Swag>);
			this._Sponsor = default(EntityRef<Sponsor>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WinnerID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long WinnerID
		{
			get
			{
				return this._WinnerID;
			}
			set
			{
				if ((this._WinnerID != value))
				{
					this.OnWinnerIDChanging(value);
					this.SendPropertyChanging();
					this._WinnerID = value;
					this.SendPropertyChanged("WinnerID");
					this.OnWinnerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AttendeeID", DbType="BigInt NOT NULL")]
		public long AttendeeID
		{
			get
			{
				return this._AttendeeID;
			}
			set
			{
				if ((this._AttendeeID != value))
				{
					if (this._Attendee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAttendeeIDChanging(value);
					this.SendPropertyChanging();
					this._AttendeeID = value;
					this.SendPropertyChanged("AttendeeID");
					this.OnAttendeeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SponsorID", DbType="BigInt NOT NULL")]
		public long SponsorID
		{
			get
			{
				return this._SponsorID;
			}
			set
			{
				if ((this._SponsorID != value))
				{
					if (this._Sponsor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSponsorIDChanging(value);
					this.SendPropertyChanging();
					this._SponsorID = value;
					this.SendPropertyChanged("SponsorID");
					this.OnSponsorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SwagID", DbType="BigInt NOT NULL")]
		public long SwagID
		{
			get
			{
				return this._SwagID;
			}
			set
			{
				if ((this._SwagID != value))
				{
					if (this._Swag.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSwagIDChanging(value);
					this.SendPropertyChanging();
					this._SwagID = value;
					this.SendPropertyChanged("SwagID");
					this.OnSwagIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(150) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Attendee_Winner", Storage="_Attendee", ThisKey="AttendeeID", OtherKey="AttendeeID", IsForeignKey=true)]
		public Attendee Attendee
		{
			get
			{
				return this._Attendee.Entity;
			}
			set
			{
				Attendee previousValue = this._Attendee.Entity;
				if (((previousValue != value) 
							|| (this._Attendee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Attendee.Entity = null;
						previousValue.Winners.Remove(this);
					}
					this._Attendee.Entity = value;
					if ((value != null))
					{
						value.Winners.Add(this);
						this._AttendeeID = value.AttendeeID;
					}
					else
					{
						this._AttendeeID = default(long);
					}
					this.SendPropertyChanged("Attendee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Swag_Winner", Storage="_Swag", ThisKey="SwagID", OtherKey="SwagID", IsForeignKey=true)]
		public Swag Swag
		{
			get
			{
				return this._Swag.Entity;
			}
			set
			{
				Swag previousValue = this._Swag.Entity;
				if (((previousValue != value) 
							|| (this._Swag.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Swag.Entity = null;
						previousValue.Winners.Remove(this);
					}
					this._Swag.Entity = value;
					if ((value != null))
					{
						value.Winners.Add(this);
						this._SwagID = value.SwagID;
					}
					else
					{
						this._SwagID = default(long);
					}
					this.SendPropertyChanged("Swag");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sponsor_Winner", Storage="_Sponsor", ThisKey="SponsorID", OtherKey="SponsorID", IsForeignKey=true)]
		public Sponsor Sponsor
		{
			get
			{
				return this._Sponsor.Entity;
			}
			set
			{
				Sponsor previousValue = this._Sponsor.Entity;
				if (((previousValue != value) 
							|| (this._Sponsor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Sponsor.Entity = null;
						previousValue.Winners.Remove(this);
					}
					this._Sponsor.Entity = value;
					if ((value != null))
					{
						value.Winners.Add(this);
						this._SponsorID = value.SponsorID;
					}
					else
					{
						this._SponsorID = default(long);
					}
					this.SendPropertyChanged("Sponsor");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Swag")]
	public partial class Swag : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _SwagID;
		
		private long _SponsorID;
		
		private string _Name;
		
		private string _ImageLocation;
		
		private int _Position;
		
		private EntitySet<Winner> _Winners;
		
		private EntityRef<Sponsor> _Sponsor;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSwagIDChanging(long value);
    partial void OnSwagIDChanged();
    partial void OnSponsorIDChanging(long value);
    partial void OnSponsorIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnImageLocationChanging(string value);
    partial void OnImageLocationChanged();
    partial void OnPositionChanging(int value);
    partial void OnPositionChanged();
    #endregion
		
		public Swag()
		{
			this._Winners = new EntitySet<Winner>(new Action<Winner>(this.attach_Winners), new Action<Winner>(this.detach_Winners));
			this._Sponsor = default(EntityRef<Sponsor>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SwagID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long SwagID
		{
			get
			{
				return this._SwagID;
			}
			set
			{
				if ((this._SwagID != value))
				{
					this.OnSwagIDChanging(value);
					this.SendPropertyChanging();
					this._SwagID = value;
					this.SendPropertyChanged("SwagID");
					this.OnSwagIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SponsorID", DbType="BigInt NOT NULL")]
		public long SponsorID
		{
			get
			{
				return this._SponsorID;
			}
			set
			{
				if ((this._SponsorID != value))
				{
					if (this._Sponsor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSponsorIDChanging(value);
					this.SendPropertyChanging();
					this._SponsorID = value;
					this.SendPropertyChanged("SponsorID");
					this.OnSponsorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(150) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImageLocation", DbType="VarChar(150) NOT NULL", CanBeNull=false)]
		public string ImageLocation
		{
			get
			{
				return this._ImageLocation;
			}
			set
			{
				if ((this._ImageLocation != value))
				{
					this.OnImageLocationChanging(value);
					this.SendPropertyChanging();
					this._ImageLocation = value;
					this.SendPropertyChanged("ImageLocation");
					this.OnImageLocationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Position", DbType="Int NOT NULL")]
		public int Position
		{
			get
			{
				return this._Position;
			}
			set
			{
				if ((this._Position != value))
				{
					this.OnPositionChanging(value);
					this.SendPropertyChanging();
					this._Position = value;
					this.SendPropertyChanged("Position");
					this.OnPositionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Swag_Winner", Storage="_Winners", ThisKey="SwagID", OtherKey="SwagID")]
		public EntitySet<Winner> Winners
		{
			get
			{
				return this._Winners;
			}
			set
			{
				this._Winners.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sponsor_Swag", Storage="_Sponsor", ThisKey="SponsorID", OtherKey="SponsorID", IsForeignKey=true)]
		public Sponsor Sponsor
		{
			get
			{
				return this._Sponsor.Entity;
			}
			set
			{
				Sponsor previousValue = this._Sponsor.Entity;
				if (((previousValue != value) 
							|| (this._Sponsor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Sponsor.Entity = null;
						previousValue.Swags.Remove(this);
					}
					this._Sponsor.Entity = value;
					if ((value != null))
					{
						value.Swags.Add(this);
						this._SponsorID = value.SponsorID;
					}
					else
					{
						this._SponsorID = default(long);
					}
					this.SendPropertyChanged("Sponsor");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Winners(Winner entity)
		{
			this.SendPropertyChanging();
			entity.Swag = this;
		}
		
		private void detach_Winners(Winner entity)
		{
			this.SendPropertyChanging();
			entity.Swag = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Sponsor")]
	public partial class Sponsor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _SponsorID;
		
		private string _Name;
		
		private string _ContactName;
		
		private string _ContactEmail;
		
		private string _SponsorshipLevel;
		
		private string _ImageLocation;
		
		private int _Position;
		
		private bool _ProvidedSwag;
		
		private EntitySet<Winner> _Winners;
		
		private EntitySet<Swag> _Swags;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSponsorIDChanging(long value);
    partial void OnSponsorIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnContactNameChanging(string value);
    partial void OnContactNameChanged();
    partial void OnContactEmailChanging(string value);
    partial void OnContactEmailChanged();
    partial void OnSponsorshipLevelChanging(string value);
    partial void OnSponsorshipLevelChanged();
    partial void OnImageLocationChanging(string value);
    partial void OnImageLocationChanged();
    partial void OnPositionChanging(int value);
    partial void OnPositionChanged();
    partial void OnProvidedSwagChanging(bool value);
    partial void OnProvidedSwagChanged();
    #endregion
		
		public Sponsor()
		{
			this._Winners = new EntitySet<Winner>(new Action<Winner>(this.attach_Winners), new Action<Winner>(this.detach_Winners));
			this._Swags = new EntitySet<Swag>(new Action<Swag>(this.attach_Swags), new Action<Swag>(this.detach_Swags));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SponsorID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long SponsorID
		{
			get
			{
				return this._SponsorID;
			}
			set
			{
				if ((this._SponsorID != value))
				{
					this.OnSponsorIDChanging(value);
					this.SendPropertyChanging();
					this._SponsorID = value;
					this.SendPropertyChanged("SponsorID");
					this.OnSponsorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(75) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactName", DbType="VarChar(75)")]
		public string ContactName
		{
			get
			{
				return this._ContactName;
			}
			set
			{
				if ((this._ContactName != value))
				{
					this.OnContactNameChanging(value);
					this.SendPropertyChanging();
					this._ContactName = value;
					this.SendPropertyChanged("ContactName");
					this.OnContactNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactEmail", DbType="VarChar(75)")]
		public string ContactEmail
		{
			get
			{
				return this._ContactEmail;
			}
			set
			{
				if ((this._ContactEmail != value))
				{
					this.OnContactEmailChanging(value);
					this.SendPropertyChanging();
					this._ContactEmail = value;
					this.SendPropertyChanged("ContactEmail");
					this.OnContactEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SponsorshipLevel", DbType="VarChar(25) NOT NULL", CanBeNull=false)]
		public string SponsorshipLevel
		{
			get
			{
				return this._SponsorshipLevel;
			}
			set
			{
				if ((this._SponsorshipLevel != value))
				{
					this.OnSponsorshipLevelChanging(value);
					this.SendPropertyChanging();
					this._SponsorshipLevel = value;
					this.SendPropertyChanged("SponsorshipLevel");
					this.OnSponsorshipLevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImageLocation", DbType="VarChar(250) NOT NULL", CanBeNull=false)]
		public string ImageLocation
		{
			get
			{
				return this._ImageLocation;
			}
			set
			{
				if ((this._ImageLocation != value))
				{
					this.OnImageLocationChanging(value);
					this.SendPropertyChanging();
					this._ImageLocation = value;
					this.SendPropertyChanged("ImageLocation");
					this.OnImageLocationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Position", DbType="Int NOT NULL")]
		public int Position
		{
			get
			{
				return this._Position;
			}
			set
			{
				if ((this._Position != value))
				{
					this.OnPositionChanging(value);
					this.SendPropertyChanging();
					this._Position = value;
					this.SendPropertyChanged("Position");
					this.OnPositionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProvidedSwag", DbType="Bit NOT NULL")]
		public bool ProvidedSwag
		{
			get
			{
				return this._ProvidedSwag;
			}
			set
			{
				if ((this._ProvidedSwag != value))
				{
					this.OnProvidedSwagChanging(value);
					this.SendPropertyChanging();
					this._ProvidedSwag = value;
					this.SendPropertyChanged("ProvidedSwag");
					this.OnProvidedSwagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sponsor_Winner", Storage="_Winners", ThisKey="SponsorID", OtherKey="SponsorID")]
		public EntitySet<Winner> Winners
		{
			get
			{
				return this._Winners;
			}
			set
			{
				this._Winners.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sponsor_Swag", Storage="_Swags", ThisKey="SponsorID", OtherKey="SponsorID")]
		public EntitySet<Swag> Swags
		{
			get
			{
				return this._Swags;
			}
			set
			{
				this._Swags.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Winners(Winner entity)
		{
			this.SendPropertyChanging();
			entity.Sponsor = this;
		}
		
		private void detach_Winners(Winner entity)
		{
			this.SendPropertyChanging();
			entity.Sponsor = null;
		}
		
		private void attach_Swags(Swag entity)
		{
			this.SendPropertyChanging();
			entity.Sponsor = this;
		}
		
		private void detach_Swags(Swag entity)
		{
			this.SendPropertyChanging();
			entity.Sponsor = null;
		}
	}
}
#pragma warning restore 1591
